# A scrape configuration for running Prometheus on a Kubernetes cluster.
# This uses separate scrape configs for cluster components (i.e. API server, node)
# and services to allow each to use different authentication configs.
#
# Kubernetes labels will be added as Prometheus labels on metrics via the
# `labelmap` relabeling action.
#
# If you are using Kubernetes 1.7.2 or earlier, please take note of the comments
# for the kubernetes-cadvisor job; you will need to edit or remove this job.

# Scrape config for API servers.
#
# Kubernetes exposes API servers as endpoints to the default/kubernetes
# service so this uses `endpoints` role and uses relabelling to only keep
# the endpoints associated with the default/kubernetes service using the
# default named port `https`. This works for single API server deployments as
# well as HA API server deployments.
scrape_configs:

# Scrape config for service endpoints.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/scrape`: Only scrape services that have a value of `true`
# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
# to set this to `https` & most likely set the `tls_config` of the scrape config.
# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
# * `prometheus.io/port`: If the metrics are exposed on a different port to the
# service then set this appropriately.
- job_name: 'kubernetes-service'
  kubernetes_sd_configs:
  - role: endpoints

  relabel_configs:
  - source_labels: [__meta_kubernetes_endpoint_port_name]
    action: keep
    regex: exporter
  # - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
  #   action: replace
  #   target_label: __scheme__
  #   regex: (https?)
  # - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
  #   action: replace
  #   target_label: __metrics_path__
  #   regex: (.+)
  # - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
  #   action: replace
  #   target_label: __address__
  #   regex: ([^:]+)(?::\d+)?;(\d+)
  #   replacement: $1:$2
  # - action: labelmap
  #   regex: __meta_kubernetes_service_label_(.+)
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: tenant
  - source_labels: [__meta_kubernetes_service_name]
    action: replace
    target_label: service

# Example scrape config for probing services via the Blackbox Exporter.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/probe`: Only probe services that have a value of `true`
# - job_name: 'kubernetes-services'

#   metrics_path: /probe
#   params:
#     module: [http_2xx]

#   kubernetes_sd_configs:
#   - role: service

#   relabel_configs:
#   - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
#     action: keep
#     regex: true
#   - source_labels: [__address__]
#     target_label: __param_target
#   - target_label: __address__
#     replacement: blackbox-exporter.example.com:9115
#   - source_labels: [__param_target]
#     target_label: instance
#   - action: labelmap
#     regex: __meta_kubernetes_service_label_(.+)
#   - source_labels: [__meta_kubernetes_namespace]
#     target_label: kubernetes_namespace
#   - source_labels: [__meta_kubernetes_service_name]
#     target_label: kubernetes_name

# Example scrape config for probing ingresses via the Blackbox Exporter.
#
# The relabeling allows the actual ingress scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/probe`: Only probe services that have a value of `true`
# - job_name: 'kubernetes-ingresses'

#   metrics_path: /probe
#   params:
#     module: [http_2xx]

#   kubernetes_sd_configs:
#   - role: ingress

#   relabel_configs:
#   - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
#     action: keep
#     regex: true
#   - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
#     regex: (.+);(.+);(.+)
#     replacement: ${1}://${2}${3}
#     target_label: __param_target
#   - target_label: __address__
#     replacement: blackbox-exporter.example.com:9115
#   - source_labels: [__param_target]
#     target_label: instance
#   - action: labelmap
#     regex: __meta_kubernetes_ingress_label_(.+)
#   - source_labels: [__meta_kubernetes_namespace]
#     target_label: kubernetes_namespace
#   - source_labels: [__meta_kubernetes_ingress_name]
#     target_label: kubernetes_name
